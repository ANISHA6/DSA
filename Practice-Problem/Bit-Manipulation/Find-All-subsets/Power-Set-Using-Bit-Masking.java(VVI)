/*
    Time Complexity: O(N*2^N)
    Space Complexity: O(N*2^N)

    where N is the size of given input array.
*/

import java.util.ArrayList;

public class Solution {

    static ArrayList<ArrayList<Integer>> FindAllSubsets(int n, ArrayList<Integer> arr) {
        // 2D ArrayList to store answer
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();

        // Temporary ArrayList to store current subset

        // Iterating over 1 to 2^N-1
        for (int num = 1; num <= Math.pow(2, n) - 1; num++) {

            ArrayList<Integer> temp = new ArrayList<>();

            // Checking ith bit value of num
            for (int i = 0; i <= n - 1; i++) {

                // If ith bit is ON, adding arr[i] to temporary subset
                if ((num & (1 << i)) == (1 << i)) {
                    temp.add(arr.get(i));
                }

            }

            // Adding the temporary subset to answer
            ans.add(temp);

        }

        // Returning the final answer
        return ans;

    }

}
